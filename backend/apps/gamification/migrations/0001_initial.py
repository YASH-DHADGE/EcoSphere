# Generated by Django 5.0.6 on 2025-10-18 22:59

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Achievement name', max_length=100)),
                ('description', models.TextField(help_text='Achievement description')),
                ('badge_icon', models.CharField(help_text='Icon identifier for the badge', max_length=50)),
                ('points_required', models.PositiveIntegerField(help_text='Points required to unlock')),
                ('criteria_type', models.CharField(help_text='Type of criteria (points, carbon_reduction, streak, etc.)', max_length=50)),
                ('criteria_value', models.DecimalField(decimal_places=2, help_text='Specific value required for criteria', max_digits=10)),
                ('category', models.CharField(help_text='Achievement category', max_length=50)),
                ('is_hidden', models.BooleanField(default=False, help_text='Whether achievement is hidden until unlocked')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'db_table': 'achievements',
                'ordering': ['points_required'],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Challenge name', max_length=100)),
                ('description', models.TextField(help_text='Detailed challenge description')),
                ('challenge_type', models.CharField(choices=[('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('COMMUNITY', 'Community'), ('CUSTOM', 'Custom')], help_text='Type of challenge', max_length=20)),
                ('points_reward', models.PositiveIntegerField(help_text='Points awarded for completion')),
                ('duration_days', models.PositiveIntegerField(help_text='Challenge duration in days')),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, help_text='Target value to achieve (optional)', max_digits=10, null=True)),
                ('target_unit', models.CharField(blank=True, help_text='Unit for target value', max_length=20)),
                ('category', models.CharField(blank=True, help_text='Challenge category (e.g., Transportation, Energy)', max_length=50)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('EXPIRED', 'Expired'), ('CANCELLED', 'Cancelled')], default='ACTIVE', max_length=20)),
                ('start_date', models.DateTimeField(help_text='Challenge start date')),
                ('end_date', models.DateTimeField(help_text='Challenge end date')),
                ('max_participants', models.PositiveIntegerField(blank=True, help_text='Maximum number of participants', null=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Whether this is a featured challenge')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(blank=True, help_text='NGO user who created this challenge', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Challenge',
                'verbose_name_plural': 'Challenges',
                'db_table': 'challenges',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(help_text='Points earned (can be negative)')),
                ('source', models.CharField(choices=[('CARBON_REDUCTION', 'Carbon Reduction'), ('CHALLENGE_COMPLETION', 'Challenge Completion'), ('LOGIN_STREAK', 'Login Streak'), ('ACHIEVEMENT', 'Achievement'), ('BONUS', 'Bonus')], help_text='Source of the points', max_length=30)),
                ('description', models.CharField(help_text='Description of the points source', max_length=200)),
                ('reference_id', models.PositiveIntegerField(blank=True, help_text='ID of related object (challenge, achievement, etc.)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Points Entry',
                'verbose_name_plural': 'User Points Entries',
                'db_table': 'user_points',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='gamification.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'db_table': 'user_achievements',
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('JOINED', 'Joined'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='JOINED', max_length=20)),
                ('progress_value', models.DecimalField(decimal_places=2, default=0, help_text='Current progress value', max_digits=10)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Progress percentage', max_digits=5)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='gamification.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Challenge',
                'verbose_name_plural': 'User Challenges',
                'db_table': 'user_challenges',
                'ordering': ['-joined_at'],
                'unique_together': {('user', 'challenge')},
            },
        ),
    ]
