# EcoSphere Environment Configuration

## Required API Keys and Configuration

This file contains all the environment variables needed to run EcoSphere. 
Copy this file to `.env` and replace the placeholder values with your actual API keys.

## üîë API Keys Required

### 1. Google OAuth2 (Required for Authentication)
```bash
# Get these from Google Cloud Console: https://console.cloud.google.com/
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=your_google_client_id_here
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=your_google_client_secret_here
```

**Setup Instructions:**
1. Go to [Google Cloud Console](https://console.cloud.google.com/)
2. Create a new project or select existing one
3. Enable Google+ API
4. Go to "Credentials" ‚Üí "Create Credentials" ‚Üí "OAuth 2.0 Client IDs"
5. Set authorized redirect URIs:
   - `http://localhost:8000/api/auth/social/o/google-oauth2/` (development)
   - `https://yourdomain.com/api/auth/social/o/google-oauth2/` (production)
6. Copy Client ID and Client Secret to the variables above

### 2. Gemini AI API (Required for Chatbot and News Summarization)
```bash
# Get this from Google AI Studio: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your_gemini_api_key_here
```

**Setup Instructions:**
1. Go to [Google AI Studio](https://makersuite.google.com/app/apikey)
2. Sign in with your Google account
3. Click "Create API Key"
4. Copy the generated API key to the variable above

### 3. Open-Meteo API (Optional - for Climate Data)
```bash
# Open-Meteo is free and doesn't require an API key, but you can get one for higher limits
OPEN_METEO_API_KEY=your_open_meteo_api_key_here
```

**Setup Instructions:**
1. Go to [Open-Meteo API](https://open-meteo.com/en/docs)
2. Sign up for a free account (optional)
3. Get your API key from the dashboard
4. Copy to the variable above (or leave empty for free tier)

## üóÑÔ∏è Database Configuration

### Option 1: Local PostgreSQL (Development)
```bash
DATABASE_URL=postgres://ecosphere_user:ecosphere_password@db:5432/ecosphere_dev_db
```

### Option 2: Supabase (Recommended for Production)
```bash
# Get this from your Supabase project settings
DATABASE_URL=postgresql://postgres:[YOUR-PASSWORD]@[YOUR-PROJECT-REF].supabase.co:5432/postgres
```

**Supabase Setup Instructions:**
1. Go to [Supabase](https://supabase.com/) and create a new project
2. Go to Settings ‚Üí Database
3. Copy the connection string and replace `[YOUR-PASSWORD]` and `[YOUR-PROJECT-REF]`
4. Or use the individual components:
   ```bash
   DB_HOST=db.[YOUR-PROJECT-REF].supabase.co
   DB_PORT=5432
   DB_NAME=postgres
   DB_USER=postgres
   DB_PASSWORD=[YOUR-PASSWORD]
   ```

## üîê Security Configuration

```bash
# Generate a secure secret key (use: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())")
SECRET_KEY=your_django_secret_key_here

# Set to False in production
DEBUG=True

# Add your domain(s) here
ALLOWED_HOSTS=localhost,127.0.0.1,yourdomain.com
```

## üåê CORS Configuration

```bash
# Frontend URLs that can access the API
CORS_ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173,https://yourdomain.com
```

## üìß Email Configuration (Optional)

```bash
# For sending emails (weekly summaries, notifications)
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your_email@gmail.com
EMAIL_HOST_PASSWORD=your_app_password_here
```

**Gmail Setup Instructions:**
1. Enable 2-factor authentication on your Gmail account
2. Generate an "App Password" for EcoSphere
3. Use the app password (not your regular password) in EMAIL_HOST_PASSWORD

## üöÄ Frontend Configuration

```bash
# Backend API URL
VITE_API_BASE_URL=http://localhost:8000/api

# WebSocket URL
VITE_WS_BASE_URL=ws://localhost:8000/ws

# Google Client ID for frontend OAuth
VITE_GOOGLE_CLIENT_ID=your_google_client_id_here
```

## üìä Redis Configuration

```bash
# Redis URL for caching and WebSocket channels
REDIS_URL=redis://redis:6379/0
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0
```

## üê≥ Docker Configuration

```bash
# Database credentials for Docker
POSTGRES_DB=ecosphere_dev_db
POSTGRES_USER=ecosphere_user
POSTGRES_PASSWORD=ecosphere_password
```

## üîß Development vs Production

### Development (.env.dev)
```bash
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1
CORS_ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173
DATABASE_URL=postgres://ecosphere_user:ecosphere_password@db:5432/ecosphere_dev_db
```

### Production (.env.prod)
```bash
DEBUG=False
ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
CORS_ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
DATABASE_URL=postgresql://postgres:[PASSWORD]@[PROJECT-REF].supabase.co:5432/postgres
SECURE_SSL_REDIRECT=True
SECURE_HSTS_SECONDS=31536000
```

## üö® Security Checklist

Before deploying to production:

- [ ] Change SECRET_KEY to a secure random value
- [ ] Set DEBUG=False
- [ ] Update ALLOWED_HOSTS with your domain
- [ ] Use HTTPS URLs in CORS_ALLOWED_ORIGINS
- [ ] Set up proper database credentials
- [ ] Configure email settings
- [ ] Enable SSL redirects
- [ ] Set up proper logging

## üìù Quick Start

1. Copy this file to `.env`:
   ```bash
   cp .env.example .env
   ```

2. Fill in the required API keys (minimum required):
   - Google OAuth2 credentials
   - Gemini API key
   - Django SECRET_KEY

3. Start the application:
   ```bash
   docker-compose up -d
   ```

4. Run migrations and seed data:
   ```bash
   docker-compose exec backend python manage.py migrate
   docker-compose exec backend python manage.py seed_data
   ```

## üÜò Troubleshooting

### Common Issues:

1. **Google OAuth not working:**
   - Check redirect URIs in Google Console
   - Ensure CORS_ALLOWED_ORIGINS includes your frontend URL

2. **Gemini API errors:**
   - Verify API key is correct
   - Check API quota limits

3. **Database connection failed:**
   - Verify DATABASE_URL format
   - Check if database service is running

4. **WebSocket connection failed:**
   - Ensure Redis is running
   - Check VITE_WS_BASE_URL matches backend

## üìû Support

If you encounter issues:
1. Check the logs: `docker-compose logs backend`
2. Verify all environment variables are set
3. Ensure all services are running: `docker-compose ps`
4. Check API key permissions and quotas